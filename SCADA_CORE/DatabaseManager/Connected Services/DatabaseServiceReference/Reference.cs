//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.DatabaseServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DatabaseServiceReference.IDatabaseManagerService")]
    public interface IDatabaseManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/Register", ReplyAction="http://tempuri.org/IDatabaseManagerService/RegisterResponse")]
        bool Register(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/Register", ReplyAction="http://tempuri.org/IDatabaseManagerService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/Login", ReplyAction="http://tempuri.org/IDatabaseManagerService/LoginResponse")]
        bool Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/Login", ReplyAction="http://tempuri.org/IDatabaseManagerService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddAnalogOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddAnalogOutputTagResponse")]
        string AddAnalogOutputTag(string tagId, string description, string ioAddress, int initValue, int lowLimit, int highLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddAnalogOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddAnalogOutputTagResponse")]
        System.Threading.Tasks.Task<string> AddAnalogOutputTagAsync(string tagId, string description, string ioAddress, int initValue, int lowLimit, int highLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddAnalogInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddAnalogInputTagResponse")]
        string AddAnalogInputTag(string tagId, string description, string driver, string ioAddress, int initValue, bool onScan, int lowLimit, int highLimit, string units);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddAnalogInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddAnalogInputTagResponse")]
        System.Threading.Tasks.Task<string> AddAnalogInputTagAsync(string tagId, string description, string driver, string ioAddress, int initValue, bool onScan, int lowLimit, int highLimit, string units);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddDigitalOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddDigitalOutputTagResponse")]
        string AddDigitalOutputTag(string tagId, string description, string ioAddress, int initValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddDigitalOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddDigitalOutputTagResponse")]
        System.Threading.Tasks.Task<string> AddDigitalOutputTagAsync(string tagId, string description, string ioAddress, int initValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddDigitalInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddDigitalInputTagResponse")]
        string AddDigitalInputTag(string tagId, string description, string driver, string ioAddress, int ScanTime, bool onScan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddDigitalInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddDigitalInputTagResponse")]
        System.Threading.Tasks.Task<string> AddDigitalInputTagAsync(string tagId, string description, string driver, string ioAddress, int ScanTime, bool onScan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/RemoveTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/RemoveTagResponse")]
        string RemoveTag(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/RemoveTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/RemoveTagResponse")]
        System.Threading.Tasks.Task<string> RemoveTagAsync(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/SwitchScanMode", ReplyAction="http://tempuri.org/IDatabaseManagerService/SwitchScanModeResponse")]
        string SwitchScanMode(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/SwitchScanMode", ReplyAction="http://tempuri.org/IDatabaseManagerService/SwitchScanModeResponse")]
        System.Threading.Tasks.Task<string> SwitchScanModeAsync(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/LoadXml", ReplyAction="http://tempuri.org/IDatabaseManagerService/LoadXmlResponse")]
        void LoadXml();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/LoadXml", ReplyAction="http://tempuri.org/IDatabaseManagerService/LoadXmlResponse")]
        System.Threading.Tasks.Task LoadXmlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/GetOutputValues", ReplyAction="http://tempuri.org/IDatabaseManagerService/GetOutputValuesResponse")]
        System.Collections.Generic.Dictionary<string, double> GetOutputValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/GetOutputValues", ReplyAction="http://tempuri.org/IDatabaseManagerService/GetOutputValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, double>> GetOutputValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ChangeOutputValue", ReplyAction="http://tempuri.org/IDatabaseManagerService/ChangeOutputValueResponse")]
        string ChangeOutputValue(string tagId, double newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ChangeOutputValue", ReplyAction="http://tempuri.org/IDatabaseManagerService/ChangeOutputValueResponse")]
        System.Threading.Tasks.Task<string> ChangeOutputValueAsync(string tagId, double newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddAlarmForAnalog", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddAlarmForAnalogResponse")]
        string AddAlarmForAnalog(string tagId, string type, int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddAlarmForAnalog", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddAlarmForAnalogResponse")]
        System.Threading.Tasks.Task<string> AddAlarmForAnalogAsync(string tagId, string type, int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/RemoveAlarm", ReplyAction="http://tempuri.org/IDatabaseManagerService/RemoveAlarmResponse")]
        string RemoveAlarm(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/RemoveAlarm", ReplyAction="http://tempuri.org/IDatabaseManagerService/RemoveAlarmResponse")]
        System.Threading.Tasks.Task<string> RemoveAlarmAsync(string tagId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerServiceChannel : DatabaseManager.DatabaseServiceReference.IDatabaseManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerServiceClient : System.ServiceModel.ClientBase<DatabaseManager.DatabaseServiceReference.IDatabaseManagerService>, DatabaseManager.DatabaseServiceReference.IDatabaseManagerService {
        
        public DatabaseManagerServiceClient() {
        }
        
        public DatabaseManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Register(string username, string password) {
            return base.Channel.Register(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password) {
            return base.Channel.RegisterAsync(username, password);
        }
        
        public bool Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public string AddAnalogOutputTag(string tagId, string description, string ioAddress, int initValue, int lowLimit, int highLimit) {
            return base.Channel.AddAnalogOutputTag(tagId, description, ioAddress, initValue, lowLimit, highLimit);
        }
        
        public System.Threading.Tasks.Task<string> AddAnalogOutputTagAsync(string tagId, string description, string ioAddress, int initValue, int lowLimit, int highLimit) {
            return base.Channel.AddAnalogOutputTagAsync(tagId, description, ioAddress, initValue, lowLimit, highLimit);
        }
        
        public string AddAnalogInputTag(string tagId, string description, string driver, string ioAddress, int initValue, bool onScan, int lowLimit, int highLimit, string units) {
            return base.Channel.AddAnalogInputTag(tagId, description, driver, ioAddress, initValue, onScan, lowLimit, highLimit, units);
        }
        
        public System.Threading.Tasks.Task<string> AddAnalogInputTagAsync(string tagId, string description, string driver, string ioAddress, int initValue, bool onScan, int lowLimit, int highLimit, string units) {
            return base.Channel.AddAnalogInputTagAsync(tagId, description, driver, ioAddress, initValue, onScan, lowLimit, highLimit, units);
        }
        
        public string AddDigitalOutputTag(string tagId, string description, string ioAddress, int initValue) {
            return base.Channel.AddDigitalOutputTag(tagId, description, ioAddress, initValue);
        }
        
        public System.Threading.Tasks.Task<string> AddDigitalOutputTagAsync(string tagId, string description, string ioAddress, int initValue) {
            return base.Channel.AddDigitalOutputTagAsync(tagId, description, ioAddress, initValue);
        }
        
        public string AddDigitalInputTag(string tagId, string description, string driver, string ioAddress, int ScanTime, bool onScan) {
            return base.Channel.AddDigitalInputTag(tagId, description, driver, ioAddress, ScanTime, onScan);
        }
        
        public System.Threading.Tasks.Task<string> AddDigitalInputTagAsync(string tagId, string description, string driver, string ioAddress, int ScanTime, bool onScan) {
            return base.Channel.AddDigitalInputTagAsync(tagId, description, driver, ioAddress, ScanTime, onScan);
        }
        
        public string RemoveTag(string tagId) {
            return base.Channel.RemoveTag(tagId);
        }
        
        public System.Threading.Tasks.Task<string> RemoveTagAsync(string tagId) {
            return base.Channel.RemoveTagAsync(tagId);
        }
        
        public string SwitchScanMode(string tagId) {
            return base.Channel.SwitchScanMode(tagId);
        }
        
        public System.Threading.Tasks.Task<string> SwitchScanModeAsync(string tagId) {
            return base.Channel.SwitchScanModeAsync(tagId);
        }
        
        public void LoadXml() {
            base.Channel.LoadXml();
        }
        
        public System.Threading.Tasks.Task LoadXmlAsync() {
            return base.Channel.LoadXmlAsync();
        }
        
        public System.Collections.Generic.Dictionary<string, double> GetOutputValues() {
            return base.Channel.GetOutputValues();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, double>> GetOutputValuesAsync() {
            return base.Channel.GetOutputValuesAsync();
        }
        
        public string ChangeOutputValue(string tagId, double newValue) {
            return base.Channel.ChangeOutputValue(tagId, newValue);
        }
        
        public System.Threading.Tasks.Task<string> ChangeOutputValueAsync(string tagId, double newValue) {
            return base.Channel.ChangeOutputValueAsync(tagId, newValue);
        }
        
        public string AddAlarmForAnalog(string tagId, string type, int priority) {
            return base.Channel.AddAlarmForAnalog(tagId, type, priority);
        }
        
        public System.Threading.Tasks.Task<string> AddAlarmForAnalogAsync(string tagId, string type, int priority) {
            return base.Channel.AddAlarmForAnalogAsync(tagId, type, priority);
        }
        
        public string RemoveAlarm(string tagId) {
            return base.Channel.RemoveAlarm(tagId);
        }
        
        public System.Threading.Tasks.Task<string> RemoveAlarmAsync(string tagId) {
            return base.Channel.RemoveAlarmAsync(tagId);
        }
    }
}
